Datenerfassungssysteme werden häufig in der Industrie verwendet, um Analysen auf erfassten Daten durchzuführen oder für die Überwachung. Das Studium der gesammelten Daten, von Teils erheblicher Menge, führt zu einem besseren Verständnis des überwachten Systemverhaltens. Der Raspberry Pi bietet eine erschwingliche, leicht zugängliche und energiesparende Lösung, die Daten erfassen, darstellen und wieder ausgeben kann. Zum Beispiel könnte ein Raspberry Pi verwendet werden, um den Energieverbrauch einer Heizung in einem Gebäude zu überwachen.

In dieser Artikelserie werde ich einen unabhängiges Datenerfassungssystem aufbauen, das aus mehreren Teilen besteht. Die Komponenten des Systems können für andere Anwendungen modifiziert werden. Diese Reihe verwendet das Raspbian Raspberry Pi Betriebssystem mit der Programmiersprache Java.

Anforderungen der Basisstation

Das Ziel des Projekts ist es Tag und Nacht, ohne Unterbrechung zu laufen. Deshalb muss besonderes Augenmerk auf die Auswahl der Stromversorgung gesetzt werden. Sie sollte effizient und zuverlässig sein. Wenn nur wenige sparsame Sensoren angeschlossen sind, ist ein Handy-Ladegerät wahrscheinlich genug. Es liegt am Leser zu entscheiden, ob ein Bildschirm, Tastatur, Maus oder Remote-Access erforderlich ist, um mit dem Raspberry Pi zu arbeiten. Ich entschied mich alle Daten auf der SD-Karte aufzuzeichnen. Allerdings könnten die Daten auch auf eine USB-Festplatte mit separater Stromversorgung oder auf einem Netzwerkdateisystem gespeichert werden, oder lokal gepuffert und dann versendet. Schreiben aller Daten ermöglicht eine vollständige Analyse und reduziert den Schreibzugriff auf das Speichermedium im Vergleich zu einem Ringpuffer. Die Speicherung von Messwerten für ein Jahr könnte hunderte Megabyte an Daten bedeuten. Wenn solche Protokolldaten gespeichert werden sollen, ist entweder eine Festplatte oder Netzwerkdateisystem erforderlich.

Raspbian ist ein sehr komfortables Betriebssystem. Das Standard-Image enthält jetzt die Oracle Java Virtual Machine, die sehr effizient ist. Das Standard Raspbian Image enthält auch Systemtreiber für die Busse (I2C, SPI, UART), die über die GPIO-Pins zur Verfügung stehen. Um Raspbian auf einer SD-Karte zu installieren, folge den offiziellen Tutorials auf http://www.raspberrypi.org/downloads. Die auf dem Raspberry Pi GPIO verfügbaren Busse können mit Hilfe der Java-Bibliothek Pi4J gesteuert werden. Diese Bibliothek wird später in diesem Artikel erläutert. Für die Leser die nicht mit Java vertraut sind, bietet die Serie Cup of Java MagPi eine grundlegende Einführung in den Ausgaben 14 und 17.

Anschluß des BMP085

Das BMP085 ist eine sehr präzise und kostengünstige Lösung zur Temperatur- und Luftdruckmessung. Es kann von http://www.adafruit.com oder von einem ihrer Händler bestellt werden. Es kommt in der Regel auf einer Leiterplatte montiert, die direkt am I2C-Bus des Raspberry Pi angeschlossen werden kann.
Bevor das BMP085 verwendet werdenkann, muss das i2c-Kernel-Modul aktiviert sein. Eingabe auf der Befehlszeile: 

 cd /etc
 sudo nano modprobe.d/raspi-blacklist.conf

Suchen Sie die Zeile blacklist i2c-bcm2708 und fügen Sie einen Hash "#" am Anfang der Zeile ein, so wird es #blacklist i2c-bcm2708 . Zum Speichern und Beenden, drückt man <Ctrl> + <X> und dann <Y> und die Eingabetaste. 

Als Nächstes bearbeiten Sie die Datei modules. Eingabe auf der Befehlszeile: 

 sudo nano modules 

Man fügt i2c-dev auf einer neuen Zeile hinzu. Zum Speichern und Beenden, drückt man wieder <Ctrl> + <X> und dann <Y> und die Eingabetaste. 

Starten Sie den Raspberry Pi neu und öffnen Sie ein Terminal-Fenster zur Eingabe:

 sudo i2cdetect -y 1

HINWEIS:  Wenn man Revision 1 des Raspberry Pi hat, muss 0 statt 1 für die Buslinie im obigen Befehl benutzt werden. Die Revision 1 des Pi hat keine Befestigungslöcher auf der Leiterplatte. Neuere Versionen haben 2 Montagebohrungen. 

Die Antwort sollte 77 in der Adressliste zeigen. Weitere Informationen sind im Adafruit Tutorial http://goo.gl/PDrZGL zur Verfügung gestellt.

Javaprogramm zur Datenerfassung

Oracle hat eine Java Virtual Machine, die für den Raspberry Pi optimiert wurde zur Verfügung gestellt. Man Überprüft die Java-Version durch Eingabe von:

 java -version

Die Version sollte 1.7.0_40 oder höher sein.

Um den Quellcode zu diesem Projekt zu erhalten, folgen Sie den Anweisungen auf http://goo.gl/KqPH24.
Der Source-Code muss je nach angeschlossenen Sensoren und verwendetem Online-Server, angepasst werden. Einzelheiten zur Pi4J Java-Bibliothek sind unter http://pi4j.com gegeben.

Pi4J Bibliothek bietet direkten Zugriff auf den SPI-Bus und eine Menge GPIO Funktionen.

Ziele des Programms
Beim Startvorgang, Konfiguration der Kommunikation der Sonden und der Sonden an sich.
Beim Startvorgang, laden der zuvor aufgezeichneten Daten aus Log-Dateien.
Abrufen der Daten von den Sonden und Speicherung als Klartextdatei auf der SD-Karte. 
Berechnung von Durchschnitten mit unterschiedlichen Zeitskalen, um historische Daten aufzubereiten.
Versandt der gemittelten Daten über das Internet an einen Web-Server mit FTP-Zugang.
Verwendung eines Diagramms als graphische Benutzerschnittstelle zur vereinfachten lokalen Visualisierung.

Durch die Erfassung aller Daten ist es nachträglich möglich, die Analysemethode zu ändern oder die vollständigen Daten zu analysieren.

Struktur

Die angeschlossenen Sonden können viele verschiedene Arten von Werten liefern. Die gewählte Lösung besteht aus einer abstrakten Klasse für die Sonden, die für jeden angeschlossenen Sensor implementiert werden muss. Eine Sonden-Implementierung dieser Klasse muss eine oder mehrere DataChannel-Objekte haben, die als Datenmodell dienen. Im Sinne des Model-View-Controller Patterns, kann die ProbeManager Klasse als Controller gesehen werden, der die View steuert.

Die Klasse DataChannel umfasst alle Funktionen, die für jede Art von Daten gebräuchlich sind.   Sie lädt bei der Instanziierung die bisherigen Daten aus der Protokolldatei, protokolliert neue Daten und berechnet Durchschnitte. Die verschiedenen Implementierungen von AbstractProbe beinhalten spezifische Funktionen für den jeweilligen Typ des Sensors. Jede abgeleitete Klasse sollte den Sensor konfigurieren, Daten verarbeiten oder konvertieren und sie dann dem richtigen DataChannel-Objekt zuführen.

Anbindung an das BMP085

Die Klasse BMP085probe erweitert AbstractProbe und bietet Zugriff auf DataChannel-Objekte. Es gibt zwei Objekte: eines für die Temperatur und ein zweites für den Luftdruck. Die beiden Argumente des DataChannel Konstruktors ist der Name für die Anzeige und der Name der Datendatei.

 private DataChannel pressureChannel = new DataChannel("Luftdruck",     
     "Atmospheric_Pressure");
 private DataChannel temperatureChannel = new DataChannel("Zimmertemperatur", "Room_Temperature");

Die Klasse BMP085probe überschreibt die abstrakte Methode, die den Zugriff auf die DataChannel-Objekte bietet:

 @Override
 public DataChannel[] getChannels() {
   return new DataChannel[]{pressureChannel, temperatureChannel};
 }

Das I2CBus Objekt aus der Pi4J Bibliothek wird dem BMP085 Konstruktor übergeben, da es mehrere Peripheriegeräte auf dem gleichen I2C-Bus geben kann. Mit diesem Bus können wir unser I2C-Gerät konfigurieren. Das BMP085 hat die Adresse 0x77.

 public static final int BMP085_I2C_ADDR = 0x77;
 private I2CDevice bmp085device;
 public BMP085probe(I2CBus bus) throws IOException {
   bmp085device = bus.getDevice(BMP085_I2C_ADDR);
   readCalibrationData();
   DataReaderThread dataReaderThread = new DataReaderThread();
   dataReaderThread.start();
 }

Das dataReaderThread Objekt wird verwendet, um eine Anfrage für Temperatur- und Druck zu verschicken. Dann liest der Thread zwei Bytes Temperatur-Rohdaten und drei Bytes Druck-Rohdaten.

 bmp085device.write(CONTROL, READTEMPCMD);            //Sende Befehl ‘read temperature’
 sleep(50);                                           //warte auf Daten
 rawTemperature = readU16(DATA_REG);                  //lese 2 Bytes aus
 bmp085device.write(CONTROL, (byte) READPRESSURECMD); //Sende Befehl ‘read pressure’
 sleep(50);                                           //warte auf Daten
 msb = readU8(DATA_REG);                              //lese 3 Bytes aus
 lsb = readU8(DATA_REG+1);
 xlsb = readU8(DATA_REG+2);
 rawPressure = ((msb << 16) + (lsb << 8) + xlsb) >> (8-OSS); //Erzeuge Integer für Druck Rohdaten

Mit BMP085 Datenblatt (http://goo.gl/CborFs) und unter Verwendung der zuvor gelesenen Kalibrierungswerte können diese Rohdaten in Pascal und Grad Celsius Einheiten umgewandelt werden. Java unterstützt keine nativen unsigned integer Typen. Es ist daher einfacher Bit-Shift Operationen durch Division und Multiplikation zu ersetzen.  

 double temperature = 0.0;
 double pressure = 0.0;
 double x1 = ((rawTemperature - cal_AC6) * cal_AC5) / 32768;
 double x2 = (cal_MC *2048) / (x1 + cal_MD);
 double b5 = x1 + x2;
 temperature = ((b5 + 8) / 16) / 10.0;

 double b6 = b5 - 4000;
 x1 = (cal_B2 * (b6 * b6 / 4096)) / 2048;
 x2 = cal_AC2 * b6 / 2048;
 double x3 = x1 + x2;
 double b3 = (((cal_AC1 * 4 + x3) * Math.pow(2, OSS) )+2) / 4;
 x1 = cal_AC3 * b6 / 8192;
 x2 = (cal_B1 * (b6 * b6 / 4096)) / 65536;
 x3 = ((x1 + x2) + 2) / 4;
 double b4 = cal_AC4 * (x3 + 32768) / 32768;
 double b7 = (rawPressure - b3) * (50000 / Math.pow(2, OSS));
 if (b7 < 0x80000000) pressure = (b7 * 2) / b4;
 else pressure = (b7 / b4) * 2;
 x1 = (pressure / 256) * (pressure / 256);
 x1 = (x1 * 3038) / 65536;
 x2 = (-7375 * pressure) / 65536;
 pressure = pressure + (x1 + x2 + 3791) / 16;

Dieser Sensor kann eine hohe Datenrate liefern. Um die Genauigkeit zu erhöhen, kann ein Thread 5 Datenpunkte mitteln und diese Durchschnitt jede Sekunde an das DataChannel-Objekt anfügen.

Um das BMP085 zum endgültigen Programm hinzuzufügen, besorgt man sich in der Main Klasse eine Instanz aus der Pi4J I2CBus Factory, instantiiert BMP085probe und fügt dies dem probeManager hinzu.

 private void initI2CandBMP085probe() {
   try {
     final I2CBus bus = I2CFactory.getInstance(I2CBus.BUS_1); //Ändere auf BUS_0 für Rev 1 boards.
     bmp085Probe = new BMP085probe(bus);
     probeManager.addProbe(bmp085Probe);
   } catch (IOException e) {
     e.printStackTrace();
   }
 }

Nun können die beiden DataChannel Werte für Temperatur und Luftdruck ermittelt, protokolliert und als Diagramm angezeigt werden.

Im nächsten Artikel gibt es weitere Anweisungen für Datenexport und Setup einer Web-Seite zum Anzeigen der Daten. Bis es soweit ist, versuche den Code zu erstellen und probiere die beschriebene Hardware-Konfiguration aus.

